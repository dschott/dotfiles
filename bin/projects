#!/usr/bin/env bash

if ! check-command git jq; then
    exit 1
fi

# shellcheck disable=SC2034
NONGIT_OK=1

# shellcheck disable=SC2034
OPTIONS_SPEC="\
projects list
projects [edit|open|cd] <projectname>
projects config [projectname]
projects completion <shell>

Manage git projects
--
h,help     show help
"

eval "$(echo "$OPTIONS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

shell=
project_name=

main() {
    while test $# -gt 0; do
        opt="$1"
        shift

        case "$opt" in
        --)
            break
            ;;
        *)
            err "Invalid option: ${opt}"
            usage
            ;;
        esac
    done

    cmd="${1}"
    shift

    case "${cmd}" in
    list)
        list_projects
        ;;
    edit)
        project_name="${1}"
        shift
        edit_project
        ;;
    cd)
        project_name="${1}"
        shift
        cd_project
        ;;
    open)
        project_name="${1}"
        shift
        open_project
        ;;
    config)
        project_name="${1}"
        shift
        config
        ;;
    completion)
        shell="${1}"
        shift
        completion
        ;;
    *)
        err "Invalid command: ${cmd}"
        usage
        ;;
    esac

}

# shellcheck disable=2039
__projects_bash_complete() {
    case "${COMP_CWORD}" in
    1)
        cmds="list edit cd open config completion"
        mapfile -t COMPREPLY <<< "$(compgen -W "${cmds}" -- "${COMP_WORDS[1]}")"
        ;;
    2)
        cmd="${COMP_WORDS[1]}"
        case "${cmd}" in
        completion)
            mapfile -t COMPREPLY <<< "$(compgen -W "bash" -- "${COMP_WORDS[2]}")"
            ;;
        edit|open|cd|config)
            mapfile -t COMPREPLY <<< "$(compgen -W "$(projects list)" -- "${COMP_WORDS[2]}")"
            ;;
        esac
        ;;
    esac
}

completion() {
    if [ -z "${shell}" ]; then
        err "Shell not specified"
        usage
    fi
    case "${shell}" in
    bash)
        type __projects_bash_complete | tail -n +2
        echo
        echo "complete -o default -F __projects_bash_complete projects"
        ;;
    *)
        die "Unsupported shell: ${shell}"
        ;;
    esac
}

list_projects() {
    if [ -f "${HOME}/.projects" ]; then
        jq -r ".projects[].name" "${HOME}/.projects" | column
    fi
}

edit_project() {
    if ! entry="$(project_entry)"; then
        usage
    fi

    path="$(echo "${entry}" | jq -r '.path')"
    path="$(eval printf "${path}")"
    repo=$(echo "${entry}" | jq -r '.repo')

    if [ ! -r "${path}" ]; then
        mkdir -p "${path}"
        if ! git clone "${repo}" "${path}"; then
            rm -rf "${path}"
        fi
    fi
    edit "${path}"
}

open_project() {
    if ! entry="$(project_entry)"; then
        usage
    fi

    url="$(echo "${entry}" | jq -r '.url')"

    case "$(uname -s)" in
    Darwin)
        open "${url}"
        ;;
    Linux)
        nohup xdg-open "${url}" > /dev/null 2>&1
        ;;
    *)
        die "Unsupported os: $(uname -s)"
    esac
}

cd_project() {
    if ! entry="$(project_entry)"; then
        usage
    fi

    path="$(echo "${entry}" | jq -r '.path')"
    path="$(eval printf "${path}")"
    # shellcheck disable=SC2164
    cd "${path}"
}

config() {
    if [ -n "${project_name}" ]; then
        if ! entry="$(project_entry)"; then
            usage
        fi
        echo "${entry}"
    else
        path="${HOME}/.projects"
        if [ ! -r "${path}" ]; then
            touch "${path}"
        fi
        edit "${path}"
    fi
}

edit() {
    path="${1}"
    if [ -r "${path}" ]; then
        editor=
        prj_path="${HOME}/.projects"
        if [ -f "${prj_path}" ]; then
            if [ -n "${project_name}" ]; then
                e="$(jq -r ".projects[] | select(.name == \"${project_name}\").editor" "${prj_path}")"
                if [ "${e}" != "null" ]; then
                    editor="${e}"
                fi
            fi
            if [ -z "${editor}" ]; then
                e="$(jq -r ".editor" "${prj_path}")"
                if [ "${e}" != "null" ]; then
                    editor="${e}"
                fi
            fi
        fi
        "${editor:-vi}" "${path}"
    fi
}

project_entry() {
    if [ -z "${project_name}" ]; then
        die "Project not specified"
    fi
    if [ -f "${HOME}/.projects" ]; then
        entry="$(jq ".projects[] | select(.name == \"${project_name}\")" "${HOME}/.projects")"
    fi
    if [ -z "${entry}" ]; then
        die "Project not found: ${project_name}"
    fi
    echo "${entry}"
}

err () {
	printf >&2 '%s\n' "$*"
}

die () {
	err "$@"
	exit 1
}

usage() {
    "$0" -h
    exit 1
}

main "${@}"
